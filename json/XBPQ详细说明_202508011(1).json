{
/**
一、基础功能

1.截取方式
有四种:
☆这四种方式可在✚（+）拼接、指定、轮询、并发以及整个配置的任意位置混合使用，在工具中使用这四种截取方式，需要使用规定的功能符号，不能与工具外的功能符冲突

(1)&&（正则匹配任意字符串）
这是最灵活，但也是运行效率最低的方法，在工具中，功能符"&&"换成"截取"
*所有截取前后用&&连接，如果只有功能&&，没有前后字符串，表示直接使用原始字符串，省略前面字符串表示从头开始截取，省略后面字符串表示截取到末尾
*&&前后可以是数字，正数从右往右数(1代表第一个字符)，负数从右往左数(-1代表倒数第一个字符)，比如"1&&-1"表示从第一个截取到最后一个，等同于"&&"
*不使用&&表示用指定字符串，如使用固定标题，固定图片，"标题":"正片" "图片":"http://xxx.xxx.com/uplod0034.jpg"
*末尾如果是"整页"，会在整页查找截取，比如a&&b整页
*&&前可以使用通配符*和**，*在单个html标签内匹配，不超出<>范围，如<a*>&&</a>；**在整个html文档中匹配，不限制范围，一个字段可以使用任意数量的通配符，*或**不能同时使用
*支持在响应头中截取：响应头(a&&b)
*指定网页截取：url:http...$sub:a&&b⊕c&&d，省略$sub:及后面截取规则，直接返回源码
☆新增截取方式：/正则表达式/g
☆真实域名(参数)，用重定向后的链接替换此方法，参数可以是链接，可以是截取规则
☆随机图片(参数)，用随机图片替换此方法，参数可以是本地txt，里面包含图片列表，可以是网址，自动从网站获取随机图片，多个txt或网址之间用#分隔

(2)j:（使用Gson操作json对象）
*对于json文档，可使用json方式截取，j:开头，以示区别，在工具中使用时，将"j:"改为"json截取:"
*普通网页中的json数据，需要截取包括大括号{}在内的标准json数据
*示例：j:data.list[1].name，或：j:/data/list/1/name，表示获取json对象"data"的json数组"list"的第1个json对象的"name"属性值。
*json数组可指定下标，最小下标为自然1（第一个），可以为负数，最大为-1（倒数第一个），可指定范围，如：j:data.list[1,-1]，或者：j:data.list/1,-1，中间不能有空格。不指定就获取完整数组，如：j:data.list
*可以使用变量，可以在末尾使用[替换...][包含...][不含...][工具...]
*.json截取路径中间允许数组，比如线路标题可以一次到位
*json截取路径可使用*，获取当前json所有键的值作为数组，比如：
{
    "urls": {
        "1": {
            "name": "第01集",
            "url": "http1"
        },
        "2": {
            "name": "第02集",
            "url": "http2"
        },
        "3": {
            "name": "第03集",
            "url": "http3"
        }
    }
}
用url.1、url.2都得不到完整列表，只能用urls.*去截取，才能得到完整列表：
[
    {
        "name": "第01集",
        "url": "http1"
    },
    {
        "name": "第02集",
        "url": "http2"
    },
    {
        "name": "第03集",
        "url": "http3"
    }
]

(3)p:（使用jsoup选择器操作html文档）
*对于html文档，可使用jsoup选择器获取标签列表或属性，p:开头，以示区别，在工具中使用时，将"p:"改为"jsoup截取:"
*路径与属性之间用->分隔，比如p:a->text、p:a->href
*只有路径，不指定属性，一般用于获取数组、播放数组、播放列表，会获取所有该标签的完整内容，比如p:li a，将获取所有li标签下面所有a标签完整内容
*没有路径，只指定属性，一般用于标题、图片、链接、播放标题、播放链接等等，将获取相应属性，比如以"<a href='l1'>项1</a>"为例，可能通过p:->href得到"l1"，通过p:->text得"到项1"，属性的分隔符->不能少
*支持jsoup全部语法，比如使用通配符*，p:ul[class*="v_list"] li，表示选择class包含v_list的ul标签下所有li标签，homec_v_list、search_v_list、v_list都在选择范围内。再比如多项选择，p:ul[class*="v_list"],ul[id="list"] li，表示选择class包含v_list或id为list的ul标签下所有li标签

(4)a&&b分割(分割符)（使用split把字符串分割成数组）
这个方法运行效率最高，不需要正则匹配，也不需要解析json或html，使用split一次性分割
*功能分两部分：指定范围和分割，a&&b用于指定分割范围，可以是多个范围，分割(分割符)用于分割成数组
*不需要指定范围时，直接使用&&分割(分割符)，如："播放列表":"&&分割(#)",
*分割符支持补到原位，以"前:"开头的分割符，补到分割内容前端，如："数组":"\"list\"&&</ul>分割(前:<a)",；以"后:"开头的分割符，补到分割内容末尾，如："播放列表":"\"playlist\"&&</ul>分割(后:</a>)",
*分割符支持轮询，用"或"分隔，如："数组":"\"list\"&&</ul>分割(前:<a或后:</li>)",如果里面的"或"不是轮询符，写成"\\或"
*指定范围和分割可以分别使用替换、过滤和工具，如："分类数组":"<ul&&</ul>[包含:>电影<]分割(后:</li>)[不含:首页#直播#留言#APP]",
*一般于快速高效截取分类数组、数组、播放数组、播放列表，可以获得整个数组，其他地方使用只会得到一个字符串，可以使用筛选来得到想要的那个字符串，如："播放标题":"&&分割($)[含序号:1]",

2.过滤
[只含:xx#xx]、[包含:xx#xx]、[必含:xx#xx]、[不含:xx#xx]、[含序号:n#m-n]、[不含序号:-n#m-]，在工具中使用时，[]换成〔〕
*按关键词筛选：只含、包含、必含或不含，用#分隔多个关键词，全部英文符号，只含是和任一关键词完全相同，包含是包含任一关键词，必含是包含所有关键词，不含是不含所有关键词。例
如"分类数组": "class=\"nav\"&&</div>[不含:首页#资讯]",
*按位次筛选：含序号(不含序号)是按截取内容出现的位次进行筛选，可以是单个序号，也可以是多个(用#分隔)或连续序号(用-连接)，连续序号可以省略首尾，表示从头或到末尾。例
如"数组": "class=\"hl-list-item&&</li>[含序号:1#4-7#9-]",

3.替换:
*可在截取信息末尾用中括号修改替换显示内容，替换与被替换之间用>>分隔，用#分隔多个替换项，替换为汉字空时表示删除被替换词
*被替换词可以用通配符*，比如(*)，会替换掉包含括号的左右括号之间的全部字符。替换内容也可以使用*，作用等同于&&截取，表示替换内容从网页获取，例
"线路数组": "class=\"hl-tabs-btn hl-slide-swiper&&</a>[替换:线路1>>腾腾#播放>>空#(*)>>空]",
*数组或列表的替换可以使用<序号>来从1开始按顺序编号，如[替换:v>>?ep=<序号>.mp4]
☆新增替换方式：[替换:/正则表达式/g>>/正则表达式/g]
*替换时的一些特殊符号："\\n"代表看不见的换行符，"\\\\n"代表能看见换行符字符（\n或\r\n），"\\空"代表单斜杠（\），
*以下符号需要用\\转义：#、[、]，"\\空"后面如果不是挨着这三个符号，也不挨着\\，可以省略\\后面的"空"，以删除反斜杠为例，[替换:\\空>>空]可以写成[替换:\\>>空]
*被替换内容如果是"空"可以省略这个"空"，如[替换:\\>>空]可以写成[替换:\\>>]

4.拼接:
一般情况下默认功能符为+，为了避免和一些密文中的+冲突，可结合快捷命令;;✚使用✚作为拼接功能符，工具中一律用⊕，以+为例对此功能说明如下：
*+号拼接支持指定字符串与截取字符串混合拼接，如：/play/+/vod/&&.html+-1-1.html，表示把/vod/id编号.html拼接成/play/id编号-1-1.html
*可无限拼接
*可从其他页面截取内容来拼接，举例：
a&&b+url:http://.....$sub:c&&d⊕x&&y+e&&f
没有url:....$sub:的都从当前网页截取，有这个的，从指定网页截取，指定网页的拼接用⊕，不指定网页的拼接用+
*当使用快捷命令✚时，用✚作为截取拼接符号，避免密文的+号冲突，避免工具中转义替换，提高运行速度
*工具中的截取拼接始终使用⊕
*所有url也支持+url:拼接，+url:http.....放末尾
*链接中如果有"时间戳"，会自动替换成即时毫秒值
*链接中如果有md5(字符串)，会自动对"字符串"进行md5编码，默认utf-8编码，如果是iso-8859-1编码，使用md5(字符串,iso)

5.指定、轮询、并发截取:
*指定功能符--，多个指定之间用||分隔，工具中使用∬分隔
*当功能符与某些网址的--冲突时有两种解决方案：转义网址中的--为\\-\\-，或者结合快捷命令→使用→→
*嗅探规则和跳转播放支持按线路指定截取，其他字段支持按分类指定截取
*指定方式：默认--a&&b||l连续剧--c&&d||首页--e&&f||搜索--g&&h，未指定的使用第一组，所有截取方式均可指定；
*首页和搜索也可以指定截取，都在获取分类字段中填写，搜索字段为空或只有"搜索url"时，搜索指定截取才生效
*轮询方式：未指定分类的多个以||分隔的截取，会进行轮询，直到得到非空结果或轮询完毕，比如:a&&b||c&&d||e&&f||g&&h
*指定与轮询可以并存，如果第一个是默认--，只指定，不轮询
*并发方式：以@@分隔的多个截取，会使用列出的所有方式截取后将数据合并，仅适用于数组、列表类，字符类的结果与轮询一样，只取第一个数据
*没有分类的单个文件或网页，可通过在地址后加?{cateId}(如果地址中已经有?，使用&)，然后指定截取的方式进行分类展示
*示例：
{
      "key": "live直播",
      "name": "live直播",
      "type": 3,
      "playerType": 1,
      "api": "csp_XBPQ",
      "searchable": 0,
      "quickSearch": 0,
      "filterable": 0,
      "ext": {
"主页url":"./lives/live.txt",
"直接播放":"1",
"链接前缀":"http",
"副标题":"group-title=\"&&\"",
"分类":"央视$1#卫视$2#地方$3",//1，2，3随意编，只要不重复就行
"分类url":"./lives/live.txt?{cateId}",
"二次截取":"央视--\\#\\#央视&&\\#\\#||卫视--\\#\\#卫视&&\\#\\#||地方--\\#\\#地方&&\\#\\#",//我在文件中手动加入##央视和##，作为央视列表的前后分割符，不影响直播，也能点播，因为#是XBPQ使用的连接符，这时要用\\转义。也可以用其他的，随意
"数组":"INF:&&EXT",
"标题":",&&http",
"图片":"http://",
"链接":"http+http&&\\#",
"嗅探词":"m3u8"
}},

6.转义符:
*XBPQ使用到的连接符（$ # & * [ ] ( ) +）用于表示本义并与功能符冲突时，需要用\\转义，比如：要截取href="?cat&token=5543tdd5779fd87554gfy"中的token=5543tdd5779fd87554gfy，href=\"?cat\\&&&\"

7.Base64()
*整个html如果是Base64编码，可在二次截取处填写"Base64()"表示不截取，只解码，如果截取数据是Base64编码，可在Base64()括号内填写截取字段，比如Base64(a&&b)，表示对截取的结果进行Base64解码后再使用
*用于url类型时，表示用Bse64编码括号中的内容替换整个函数

8.urlDecode()
*一般用于链接，比如urlDecode(a&&b)，表示对截取的内容进行Url地址解码，跳转播放链接截取后自动解码，此方法只在其他地方作备用

9.post请求
支持5种模式：
*application/x-www-form-urlencoded
    http....;post;a=b&c=d
☆如果不允许post的值进行二次url编码，post体中附加&u2=0，比如http....;post;a=b&c=d&u2=0
*application/json
    http....;post;{\"a\":\b\",\"c\":\"d\"}
*text/plain
    text:后面可以是明文也可以是gzip压缩字符串
    http....;post;text:abdc
*application/xml
    xml:后面可以是明文也可以是gzip压缩字符串
    http....;post;xml:<a><b>c</b><d>e</d></a>
*multipart/form-data; boundary=xxxboundaryxxx
    data:后面可以是gzip压缩字符串，也可以是明文，明文要注意格式有严格要求：(1)边界符xxxboundaryxxx内部不能有空格；(2)字段之间必须用\r\n分隔；(3)字段名与字段值之间用\r\n\r\n分隔；(4)\r\n前后不能有空格；(5)头部参数nContent-Disposition: form-data; name=中间的空格不能少，举例如下：
    http....;post;data:--xxxboundaryxxx\r\nContent-Disposition: form-data; name=\"type_id\"\r\n\r\n11\r\n--xxxboundaryxxx\r\nContent-Disposition: form-data; name=\"sign\"\r\n\r\n1d6ef00f23c2a389e836ea4808747532\r\n--xxxboundaryxxx\r\nContent-Disposition: form-data; name=\"limit\"\r\n\r\n12\r\n--xxxboundaryxxx\r\nContent-Disposition: form-data; name=\"page\"\r\n\r\n2\r\n--xxxboundaryxxx\r\nContent-Disposition: form-data; name=\"timestamp\"\r\n\r\n1753207559\r\n--xxxboundaryxxx--\r\n

二、进阶用法

1.JS渲染
*可对链接、html文本进行渲染，得到js渲染后的数据。
*html文本须加前缀"html:"，如果html文本内容有相对路径（以/开头的链接），必须在"html:"前加域名前缀（http开头并且/结尾），如：https:/www.abc.com/html:<html><head><script>内置CryptoJS库</script><script>注入js的代码</script></head><body><a href="https://abc.com/test.html">正文</a></body></html>。"内置CryptoJS库"会被替换为内置CryptoJS库的具体内容，可供注入的代码使用。

*如果要渲染链接，可以在链接末尾附加html:，也可兼容ID壳模式，使用以下格式：http://127.0.0.1:9978/webparse/待渲染链接<<eval:document.documentElement.outerHTML
☆以html文本渲染的方式，可注入js可实现复杂功能，达到某些条件可跳过渲染，直接返回解密结果，提供以下js交互方法：
    XBPQ.out(str)：结束渲染，直接返回str
    XBPQ.tool(str, code)：使用工具code对str进行加工
    XBPQ.log(msg)：输出msg到日志
    XBPQ.show(msg)：弹窗显示msg
    XBPQ.set(key, value)：将value存储为XBPQ变量key
    XBPQ.get(key)：从XBPQ中获取key变量
    XBPQ.cut(html, cut)：渲染时在js中调用XBPQ进行截取,如果参数html为""，则从最近一次源码中截取
*渲染可指定渲染目标，在链接末尾附加：渲染目标:a渲染目标b（调用XBPQ截取）或者附加：渲染目标:/正则表达式/（直接用js截取），渲染过程中，发现截取目标，立即结束渲染，返回截取结果
*渲染使用"渲染嗅探"(可配合"渲染过滤")字段进行嗅探，嗅探到符合条件的资源后立即结束渲染
*"渲染目标"(支持Gzip压缩格式)定时检测配合"渲染嗅探"立即截取，截取到就结束，否则继续定时检测目标，既可提高效率，又能防止目标尚未出现，但因过早嗅探到无关资源而提前结束
*渲染可以注入，在链接后附加"渲染注入，并在"渲染注入"字段填写js脚本(支持Gzip压缩格式)，就可针对该链接的渲染进行注入，在页面加载完成时运行脚本，实现监听、点击等事件，也可修改html文档，实现复杂的功能

2.自定义变量：
变量变量名：只在条件语句中使用，不提前获取变量，以免死循环
{{变量名}}：任何地方都可以使用，读取配置时加工得到变量值

*截取和工具支持使用自定义变量，格式为：{{变量名}}，变量名不能与XBPQ占用字段重名。变量通过以变量名为字段来再次截取，再次截取支持所有截取方式，因此变量可以无限嵌套，变量截取获得的值如果是不会变的

☆工具中条件语句使用变量有两种方式：{{变量名}}、变量变量名，它们的区别在于，双大括号变量会在加载工具的时候去获取，变量前缀的变量只在条件成立时才去获取

*临时变量：每次使用都要重新获取，无法在运行期间动态设置，该类变量必须提前在配置中写好该字段，不含-的变量的都是临时变量
*缓存类变量：可以缓存起来，不一定每次都重新获取，能在运行期间动态设置

-g，字符串gzip压缩后存储

-c全局缓存变量（cache）
-b全局缓存备用变量（buffer）
*全局变量，变量名以-c结尾，将缓存该变量的值，当缓存的值不为空时，不再获取新值，防止反复访问网页，变量名以-b结尾，也会缓存该变量，不过优先获取最新的值，获取不到才使用缓存

-t分类缓存变量（范围type：分类、搜索、二级，所有截取视频列表的地方）
-d详情缓存变量（范围detail：跳转链接、详情、播放列表截取，所有详情页生成播放列表数据的地方）
-p跳转缓存变量（范围play：播放链接加工、解析、小说截取、漫画截取、跳转，在点击播放后所有处理播放链接的地方）
*指定范围的变量在指定范围内每次都获取并缓存新值，如果获取不到并且有缓存值时，使用缓存值，指定范围的变量在指定范围外直接使用缓存，没有缓存值则为空

范围变量和-b的区别：
范围变量，每次进入范围内获取一次新值，之后不论在范围内还是范围外，使用缓存
-b是缓存备用变量，不指定范围，优先获取新值，获取不到新值（不包括空值）时使用缓存

-u链接类变量（url）
*链接类变量，不提前获取，使用时更新，缓存仅备用

-h请求头变量（header）
*请求头变量，需要访问网页时，请求头只提供ua

*截取的变量有多个值时，默认使用第一个值，可以使用指定序号的值，指定方式:在变量名后面跟[n]，n为自然数，当n大于值的个数时，取最后一个值，比如{{变量名-c[2]}}
*变量示例：
"链接":"{{域名-c[2]}}/vodplay/+a&&b+?token={{token}}",
"域名-c[2]":"url:http......$sub:响应头(c&&d)",
"token":"B64({{密钥}})",
"密钥":"e&&f+37dhhfGj976hGj36",
*主页url、分类url、搜索url也支持使用变量，与截取变量的区别：
(1)这三个网址使用了变量，必须先获取源码，因为这是进入此源的第一步，还没有申请过任何网页源码，没有可截取的对象，用工具:源码，或url:....$sub:...的方式获取源码后才能去截取，也可以是固定值；
(2)当变量的值是以#分隔的多个固定值，且变量名包含"并发"这两个字时，一个网址将会变成多个网址进行并发访问，数据合并。多个网址的区别在于这个变量的值对应以#分隔的各个值，比如：
"分类url":"https://xxx.xxx.xx/vodshow/{{分类并发}}/page/{catePg}",
"分类并发":"1#2",
会并发访问https://xxx.xxx.xx/vodshow/1/page/{catePg}和https://xxx.xxx.xx/vodshow/2/page/{catePg}，并将数据合并处理

*缓存有效时间：缓存类变量，变量名中间加-数字，比如"域名-3600-c"，中间的数字表示缓存有效时间，单位为秒，超过有效时间将重新获取变量值

3.内置变量：
除了可以使用自定义变量，XBPQ还内置了一些常用变量
*{{响应头}}，调用最近一次网络请求的响应头
*{{状态码}}，调用最近一次网络请求的状态码
*{{验证码}}，调用ocr获取过或验证界面输入过的验证码
*{{搜索词}}或{{wd}}，可以调用最近一次的搜索关键词
*{{线路标题}}或{{lineTitle}}，可以调用线路名
*{{分类标题}}或{{typeTitle}}，可以调用当前分类名
*{{分类链接}}或{{typeLink}}，可以调用当前分类链接
*{{分类链接-u}}或{{typeLink-u}}，可以调用url编码后的当前分类链接
*{{标题}}或{{movieTitle}}，可以调用当前影片名
*{{链接}}或{{movieLink}}，可以调用当前影片链接
*{{链接-u}}或{{movieLink-u}}，可以调用url编码后的当前影片链接
*{{播放序号}}，调用当前播放影片在剧集中的序号，从0开始，主要用于部分弹幕拼接
*{{播放标题}}或{{playTitle}}，可以调用当前影片剧集名
*{{播放链接}}或{{playLink}}，可以调用当前影片剧集链接
*{{播放链接-u
}}或{{playLink-u}}，可以调用url编码后的当前影片剧集链接
{{最近访问}}或{{lastLink}}，调用最近一次申请源码的链接
*{{数组缓存}}，可以调用从分类页截取到的数组缓存，写了"数组"这个配置，并截取了，都累加缓存
*{{日期}}，可以调用当前日期，可以指定日期格式和分隔符，如{{日期Y-M-D}}。不指定格式时默认Y-M-D，Y完整年份，y年份后两位，M月份，D日期，MD大写补位，小写不补位，以2024年5月2日为例，M-D:05-02，m-d:5-2，Y/M/D:2024/05/02，YMD:20240502。可以生成连续日期，比如{{日期Y-M-D:365}}，表示生成最近一年的以#分隔的日期
*日期可以不从当天开始，比如从昨天开始7天：{{日期Y-M-D:7-1}}，再比如只要前天这一天：{{日期Y-M-D:1-2}}
*{{时间}}，可以调用当前时间，可以指定时间格式和分隔符，如{{日期H:M:S}}。不指定格式时默认H:M:S，H时，M分，S秒，大写补位，小写不补位，以当前时间13:54:07为例，HMS ->135407，m:s ->54:7
*{{时间戳}}，调用当时时间戳，单位毫秒
*{{时间秒戳}}，调用当时时间戳，单位秒
*{{随机数50-100}}，随机产生一个50-100的自然数，取值范围可以随意指定大于1的自然数，如果不填数字，取值范围在1-10之间，如果只填写一个数字，取值范围在1-这个数之间
☆只有工具里的随机数才每次更新，其他地方在读取配置的时候就赋值
*{{分类值}}、{{页码}}，因点击分类后才能确定当前分类值和页码，所以不能直接在分类url上使用这两个变量，只能在"分类url加工"及之后的字段中使用这两个变量
*{{uuid}}，生成标准的128位随机UUID字符串，用连字符分隔为5段，形式为:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx

4.字符串加工
*加工工具可以循环使用，可以分先后结合使用，以#分隔多个工具命令，比如:"a&&b[工具:源码#json截取:data#解aes-key-iv#\"url\"*\"截取\"〔替换:detail>>play〕〔不含:err.mp4〕]"
*b64/解b64-对单个截取进行Base64编码/解码，可连续操作，如果要对多个截取拼接后的内容进行解码，请使用Base64()和urlDecode()，比如a&&b[工具:b64#解url]，表示对截取内容先进行b64编码，在此基础上再进行url解码，b64编码解码支持4种模式，b64 b64-1 b64-2 b64-3
*url/解url-url编码/解码，支持指定字符集，如a&&b[工具:url-GBK]
unicode-Unicode转码，比如\u96C6会被转换成"集"
*>>-替换，多个替换用♯分隔，一次性替换，如a&&b[工具:+>>-♯/>>0]，或者用#分隔，分开多次替换
*>-字符集转换，如a&&b[工具:UTF-8>GBK]
*时间-支持时间格式化，如620:43[工具:时间]会格式化为10时20分43秒，620:43[工具:时间:]会格式化为10:20:43，时间后面可跟分隔符
*计算-将字符串类型的数学表达式计算后返回结果，可进行加减乘除及取余运算。a&&b[工具:计算]结果只取整数部分，a&&b[工具:计算\\+]结果为四舍五入的整数，a&&b[工具:计算.]最多保留两位小数(四舍五入)
*md5-md5编码，输出大写字母用MD5
*SHA-SHA加密，SHA默认SHA-256，也可以自行指定，如SHA-1、SHA-224、SHA-384、SHA-512
*asiic-编码解码asiic，不指定分隔符就默认","，比如"解asiic"等同于"解asiic-,"，如果有-，但后面不跟任何内容，解码后的明文不加分隔符，分隔符可任意指定
*asiicToHex-十进制asiic编码转换成十六进制hex，默认分隔符为","，如果有-，但后面不跟任何内容，解码后的hex不加分隔符，分隔符可任意指定
*aes-AES加密解密，如aes解密格式为a&&b[工具:解aes-key-iv-填充模式]，如果解密后希望输出b64字符串，把"解aes"改为"解密aes"即可，加密默认输出b64格式，需要输出hex（16进制）时，aes后加hex[工具:解aes-key-iv-填充模式]，密文如果是hex，可以不b64转hex，直接用大写的AES-
☆aes通用模式：[工具:解aes-key-iv-填充模式]，所有内容不能简写，不能省略，没有iv也必须填写"空"，填充模式填写完整的以AES开头，以Padding结尾的算法类型，区分大小写，比如[工具:解aes-key-空-AES/CTR/NoPadding]，又如[工具:解aes-key-空-AES/ECB/PKCS7Padding]
☆当key或iv是base64格式时，加前缀"b64:"
☆当解密模式为gcm时，tag附在iv后，用#分隔
*des-3DES(DESede)加密解密，使用方法同aes，只需把aes改为des
*rsa-RSA加密解密，使用方法同aes，只需把aes改为rsa
*rc4-RC4加密解密，使用方法同aes，只需把aes改为rc4，不同在于rc4没有iv，没有填充模式，填了也只用key
*重定向-对url进行重定向
*源码-字符串是网址时，获取该网址的原始网页源码，利用该工具结合工具"截取"、">>"等，可以无限跳转，利用工具实现的跳转截取比url:...$sub:...更加灵活
*源码转b64-获取链接文档字节的b64编码，有些加密解密的源码不能直接读取为html，必须转为b64编码，再进行后续解密操作
*运行js-运行js代码。无参数格式：[工具:运行js]，将工具中当前字符串作为js脚本。有参数格式：[运行js-js脚本]，有参数模式可以省略前缀，直接以XBPQ.out('结果');结束的脚本，XBPQ.out();代表返回空字符串。如果要引入第三方库，js代码和引入库都得套一层<script>标签。运行js过程中可以调用java方法，XBPQ.out(str)：将结果str返回到当前工具，XBPQ.tool(str, code)：使用XBPQ工具code对str进行加工，XBPQ.tool(str, code, true)：加工的同时可查看日志，XBPQ.log(msg)：调用XBPQ日志工具输出msg到日志，XBPQ.show(msg)：调用XBPQ消息工具显示msg。如果使用的内置CryptoJS库，XBPQ.前缀可以省略，md5()/MD5()可直接用
*渲染-使用工具进行渲染
*源码渲染-只针对链接，先获取原始网页源码，然后对源码进行渲染，得到js渲染后的数据
*分割插入-分割符-插入内容-前或后或被替换内容-包含或不含（可不填），被替换内容可使用通配符，含与不含可以同时使用，包含与不含之间不分隔并且不分先后，多个条件之间用♯分隔，不是英文#，如"包含:.m3u8♯.mp4不含:.js"
*截取-工具中的截取功能，如a&&b[工具:c+d截取e]，在源码中截取ab之间的字符，在此基础上截取de之间的字符并在前面拼接c，de可以是字符序号。工具中的+用⊕，避免冲突，工具中的截取支持包含、不含，用中文〔〕括起来，多个词之间用♯分隔，工具中截取支持指定和轮询，用∬分隔
*分割截取-分割符-截取规则-合并符-包含或不含（可不填），合并符用来连接分割截取后产生的新字符串，必填项，如果跟分隔符相同，可简写"同"，如果新字符串直接拼接，填"空"，填写了含与不含时，分割后的字符串不满足条件直接舍弃，含与不含可以同时使用，包含与不含之间不分隔并且不分先后，多个条件之间用♯分隔，不是英文#，如"包含:.m3u8♯.mp4不含:.js"
*json格式化-对json字符串进行格式化，自动unicode转码并去除引号的转义符
*异或-对字符串进行异或加密，需要另一个字符串参与，两次相同的异或(加密一次，解密一次)会还原字符串，格式：异或-key
*字符映射-对加密字符串进行字符映射解密，格式：字符映射-原字符列表-映射字符列表，列表字符以|分隔
*asiic码-将英文字符或数字转为asiic码
*随机字符-从一个字符串中取随机字符指定次数，拼接成新字符串，格式[工具:随机字符-32]，如果需要生成不重复的新字符串，在指定次数后跟-唯一，如[工具:随机字符-16-唯一]
*hex-hex与b64互转工具，hex：b64转为小写hex，HEX：b64转为大写hex，解hex：大写小写hex都可转为b64
*读取-读取配置中字段内容，不作任何解析，直接加载到当前工具中，比如[工具:读取-分类url]，与{{}}的区别：{{}}可以插入任何地方，并且可以解析变量中的变量；读取只能读取原始字符串，不解析变量，不能插入其他地方，只能作为工具的一个独立步骤，会放弃前面加工内容（如果有），使用读取的新字符串来作为工具加工对象
*写入-把工具中当前字符串写入配置中字段，动态改变其值，分类url和主页url不支持动态改变，写入的配置可以读取到当前工具，也可以作为变量调用，但要注意读取和变量的区别。也可以把指定值写入配置，字段名和值之间用:分隔
*设置变量-可动态存储变量，如果是临时变量，其作用等同于写入，需避免与配置中字段重名，否则会覆盖配置，设置的临时变量可直接读取到当前工具，也可作为变量调用。也可以把指定值设置为变量，变量名和值之间用:分隔
*日志-在日志输出想要观察的变量，如果参数是"全部变量"，可在日志中查看全部变量存储情况，没有参数就在日志中输出当前工具中的内容
*弹窗-用简易弹窗提示所关注的信息，用法同日志
*消息-用加强版弹窗显示所关注的信息，可选择复制，用法同日志
*命令开-动态打开快捷命令
*命令关-动态关闭快捷命令
*ocr识别-通过提供的验证码图片链接，使用配置的ocr进行识别，提取图片中的文字，一般是验证码
*返回-直接返回固定值或变量，不再需要"固定值⊕哈哈截取哈哈"
*颠倒-颠倒字符串，比如adcd，颠倒后变成dcba

*如果-条件语句，可以根据条件选择执行分支，比如[工具:如果(条件1)那么(工具1)，否则如果(条件2)那么(工具2)，否则(默认工具)]，其功能为：当满足条件1就返回工具1执行结果，否则如果满足条件2就返回工具2执行结果，所有条件都不满足就返回默认工具执行结果。可以省略括号，但中文逗号不能省比如[工具:如果条件1那么工具1，否则如果条件2那么工具2，否则默认工具]，比如：如果a等于b那么c截取d，否则如果e不等于e那么{{f}}，否则g。
☆☆工具中条件语句使用变量有两种方式：{{变量名}}、变量变量名，它们的区别在于，双大括号变量会在加载工具的时候去获取，变量前缀的变量只在条件成立时才去获取
，这样能有效避免条件不成立时也去执行该命令，有可能造成无限循环或ddos攻击。如果变量变量名前后都有其他内容，变量名用英文小括号括起来，比如：a截取b⊕c变量(d)f
条件说明：
☆比较词支持"等于", "不等于", "大于", "小于", "包含", "不含", "开始于", "不开始于", "结束于", "不结束于"
☆比较词左右两边可以使用变量，左边如果是当前字符串，可以省略，右边为空可以不写或写空，如果部分只判断条件是否成立，不进行其他任何操作，那么部分才是要具体执行的操作
☆大于小于用于数字或字数比较，如果纯数字想用来比较字数得加上字数两字，例：如果123456字数大于8那么变量轮询二，其他用于字符串比较
执行命令：
☆那么部分是条件成立时要执行的任意工具，可以循环、如果嵌套，也可以是变量，或返回固定值
☆如果要反返回空结果，那么后面不接任何内容
☆如果要返回无需加工的固定值，那么可以直接返回+要返回的值或变量，比如，如果字数大于3那么返回http://abc.com，也可以：如果字数大于3那么返回变量域名-c
☆如果要返回进入条件语句前的值，可以使用：返回元素，相当于循环语句中的当前元素（条件语句只有一个元素用来加工，元素是加工前的字符串）
☆∬可以分隔多个条件语句，结果为空就进行∬下一个条件语句，"，否则"是条件语句内部轮询，"∬"是条件语句外部轮询符，也是工具内截取轮询符，"||"是工具外部轮询符

*循环-循环语句，可能把字符串分割成数组，循环访问元素并加工，得到不为空的结果就退出循环，格式为：循环-分割符-工具命令
☆工具命令可以是任意工具，可以循环、如果嵌套
☆循环语句中的<序号>会被自动替换为当前循环次数，循环语句中的元素会自动替换为当前元素，这两个自动不延伸到循环语句的变量中，如果需要延伸，需先存储再调用
☆上面如果语句的例子，改成循环语句可以大大简化流程，而且不用管其中元素有多少个：
"域名-c":"https://dyyztvappapigoodgx.68.gy:12689/ciwk28vu38io8/apiurl.txt[工具:源码#循环-\\n-如果变量源码字数大于7那么返回元素]",
"源码":"[工具:源码]",


下面是从一个列表中自动获取有效域名的例子：
"域名-c":"https://dyyztvappapigoodgx.68.gy:12689/ciwk28vu38io8/apiurl.txt[工具:源码#如果变量一字数大于7那么变量1，否则如果变量二字数大于7那么变量2，否则如果变量三字数大于7那么变量3，否则如果变量四字数大于7那么变量4，否则变量5]",
"一":"[工具:截取分割(\\n)〔含序号:1〕#设置变量-1#源码]",
"二":"[工具:截取分割(\\n)〔含序号:2〕#设置变量-2#源码]",
"三":"[工具:截取分割(\\n)〔含序号:3〕#设置变量-3#源码]",
"四":"[工具:截取分割(\\n)〔含序号:4〕#设置变量-4#源码]",
"5":"[工具:截取分割(\\n)〔含序号:5〕]"


5.快捷命令
*部分开关性的配置，可以直接省略不写，以快捷命令的形式出现在分类url或搜索url末尾，以;;连接url和快捷命令，命令之间不需要分隔符
*也有部分功能不提供配置写法，只以快捷命令形式存在
!-英文感叹号，开启屏蔽伦理、福利分类和筛选，默认屏蔽
✚-使用✚作为截取拼接符号，避免密文的+号冲突，避免耗时的转义替换，提高运行速度
$-直接用现成的播放数组，此时不能填写播放数列表，如果填写了，将禁止$功能生效，使用现成的播放数组同样支持通过线路标题排序和过滤
a-ua（安卓），默认苹果ua
A-播放ua（安卓）
b-对搜索词进行base64编码，有b、b2、b3、b4四种模式
c-每次都从响应头中更新cookie。不加c时，默认只要cookie不为空，就不主动获取更新，只要不加c0，自定义请求头都会每次获取
c0-请求头自动Cookie（关），默认给网页传递自动Cookie
C-播放请求头自动Cookie（开）
d-倒序（开），默认关闭
D-短视频（开）（在直接播放的基础上，把整页内容放入同一个播放列表，类似刷短视频）
f0-不显示副标
f-id版专用，方图模式，列数随系统设置，f2：横屏5列竖屏2列，f3：横屏6列竖屏3列，方图不支持1列
F-开启筛选换行，默认关闭，超过7个将换行（横屏是竖屏的2倍，14个），可指定数字，如Fn，n是几就几个换行，也可以在默认基础上增减，如横屏时F-2就是10个换一行（(7-2)x2）
g-编码快捷指令，内置常用编码--> 0：GBK，1：GB18030，2：GB2312，网页编码，g后面跟一位数，如果搜索词也要编码，g后面跟两位数，十位数代表网页编码，个位数代表搜索词编码，也可以写配置："编码":"","搜索词编码":"",
h-id版专用，横图模式，列数随系统设置，h1：横屏3列竖屏1列，h2：横屏4列竖屏2列
H-允许自动换源（开）
I-播放ua（苹果）
j-强制解析（开）
j0-强制不解析（开）
J-获取网页js渲染后的html：document.documentElement.outerHTML，J0全局渲染，J1只渲染首页和分类页和搜索页，J2只渲染详情页，J3只渲染播放页。
J1-只分类页js渲染。
J2-只详情页js渲染。
J3-只渲染播放页。
k-搜索结果的影片标题不包含搜索词，则过滤，否则如果写了副标题，但副标题未截取到，也过滤，不加k，默认只过滤标题不含搜索词的影片
k0-关闭搜索过滤
l-自动模式线路纠错，剧集被误判为线路时使用
m0-免嗅（关），默认开启
M-生成默认加密密文配置到日志，同时弹出消息弹窗以供复制
n-不对源码做任何自动化处理
N-代表Null，工具任一环节错误，或者拼接截取任一截取错误，立即返回空
o3-ocr默认3次错误重试，次数紧挨o右边，这个开关用于改变ocr重试次数
o0-禁止自动ocr验证
O-播放请求头增加Origin（主页域名）
O1-播放请求头增加Origin（实时域名）
p-渲染时不拦截图片
p3-翻多页功能，此处表示一次翻3页，数字可以是2-9，多线程并发处理
P-分类第一页无页码的情况，可使用此命令，以省略分类url的[]内容
r-请求头自动Referer（实时域名）
r1-请求头自动Referer（实时链接）
r2-请求头自动Referer（跳转链接、多线链接时，使用详情链接，其他地方使用实时链接）
R-播放请求头自动Referer（跳转播放链接时使用上级域名，其他地方使用实时域名）
R1-播放请求头自动Referer（实时链接）
R2-播放请求头自动Referer（跳转播放链接时使用上级链接，其他地方使用实时链接）
s0-搜索不延时，s-搜索和所有带search或suggest的链接，连续申请时间间隔，默认3秒，可以后面跟数字1-9，设置间隔时间，如s5表示表示搜索间隔5秒，如果搜索被作为分类且不含search和suggest，又需要延时，可在"延时":""中指定
S-限制搜索展示数量，默认展示前3个影视，后面可以跟数字1-9，搜索结果太多时可防止干扰
t-图片代理（开）
T-调试模式（开），能查看更详细的日志，打开本地网址http://127.0.0.1:9977/log可查看适时日志
u-自动解码url，默认不自动解码
u0-禁止将链接中的英文空格 替换为%20，&amp;替换为&，默认自动替换
U-所有网页全局unicode转码，默认只转码末端可显示部分
U0-禁止自动unicode转码
v-直链标记（开），把播放链接当成Video直接播放，不再嗅探或解析
w-ua（Windows）
W-播放ua（Windows）
x-兼容模式开关，此时使用jar嗅探规则，不再自动纠错"//"，不再缓存网页(缓存机制：默认除跳转图片和url:临时网页外都缓存，加x开关都不缓存，任何时候在链接中加"不缓存"则该链接不缓存，在加链接中加"缓存"就只缓存该类链接最近一次源码)
y-验证码弹窗验证（开）
Y-Webview弹窗验证（开）
z-直接播放（开）
分-把分类放推荐页，方便操作，也可在"首页"配置中填"分类"实现该功能
简-简单筛选剧情
筛-未写"筛选页"字段时，自动获取筛选页面链接
序-播放列表排序
域n-从首页中获取第n个以http开头的链接并跳转，n不大于9，没有n时获取第一个并跳转
中-筛选地区使用"中国大陆"、"中国香港"、"中国台湾"


三、新手指南

1.填写及查错步骤
☆部分网站可以网址直达，不需要写配置，直接在ext中填写网址，以;;结尾，或加快捷命令，比如:
{
  "key": "xxys",
  "name": "xx影视",
  "type": 3,
  "api": "csp_XBPQ",
  "ext": "https://xxys.com;;"
}

*需要写配置的，除"分类url"外，大部分可以省略
*写规则最简步骤：

①填写"分类url"，只填写网址首页，部分可直接使用，填写完整的包含{cateId}和{catePg}的分类url，大部分可以直接使用

②逐项补充
a.点分类无数据：一般是分类获取错误，或者未指定数组情况下不能获取到有效数据。分别尝试填写"分类"和"数组"，如果还是没有数据，就把标题图片链接都填写完整。如果网站获取分类需要验证，直接放弃
b.点分类有影片数据，但点不开详情页：这是"链接"获取错误，补充填写正确的"链接"
c.有分类，有详情，无播放列表或全部都是1：这是播放列表获取错误，补充填写正确"播放数组"以及相关字段
d.以上都有，但无法播放：这是获取"播放链接"错误，补充填写正确"播放链接"及相关字段
e.填写正确并得到了正确链接，还是无法播放，说明壳的嗅探规则对此源无效，需手动嗅探：复制播放链接到海阔视界或有嗅探功能的浏览器中打开，查看嗅探到的视频链接，查找规律，填写"嗅探词"、"过滤词"

③边写边调试
*截取配置看似正确，其实不然，跟使用查看源码的工具有关，比如使用海阔视界看到的"实际是'，导致截取失败。通过调试日志来查看源码与截取过程，能有效避免工具差异带来的影响，截取过程一目了然，问题出在哪也能快速定位
*内置日志信息默认输出简洁版，想要输出详细日志，使用"调试":"1",或快捷命令;;T，内置详细调试信息不够全面，不包含自己想要关注的变量、截取、加工结果时，可使用[工具:日志]把其输出到日志
*查看日志，在浏览器中输入并打开http://127.0.0.1:9977/log，可查看适时日志，刷新源或换源后，需要刷新网页


2.完整字段解析
*/
"自定义加密":"",//用于生成自定义密文配置到日志，"1"或"是"：生成XBPQ默认密文配置，也可以填写加密工具，快捷开关M生成默认加密密文配置
"站名":"",//成密文配置时自动添加站名注释，用于id版指定代理时，必须和文件名一致(不含扩展名)，用来给文件源生成key，自动指定代理，不然用了图片代理的源，在搜索或临时源以及历史记录中无法显示图片
"线程数":"",//使用多线程获取影片列表、播放列表，默认20，x模式影片列表线程比播放列表线程少10，但不低于5
"主页url": "",//将从此网址获取内容来展示到首页，默认从分类页中提取，一般不填
"图标":"",//id版logo
"横幅":"",//id版banner
"编码": "",//默认"UTF-8"，一般不填
"首页": "",//可指定展示分类和数量，如"电影$20"，不指定数量默认展示最多40个，不指定分类默认展示首页推荐
//新版id壳，"首页"填"分类"或使用快捷命令"分"时，会把分类放推荐页，方便操作
"热搜":"",//截取热搜部分在首页展示，生成首页二级目录，可以使用+号合并多个截取，可以使用url:http....$sub:a&&b
"热搜分类":"",//把热搜作为一个分类，截取后自动加入分类中
"请求头": "",//默认电脑ua，特殊网站需填写为"手机"，支持头部数据集，用$和#分隔
//特殊请求头用法，在链接后附加：请求头(xxx)，再单独写一个xxx字段来定义这个特殊请求头
//所有请求头，除ua外，如果值为"空"，代表删除该项，不使用这个参数，相应快捷命令也会被忽略，比如"Referer$空"，此时不会使用Referer这个参数，不论有没有快捷命令r或R

//2023.1.1更新
"播放请求头": "",//一般不需要，播放一直嗅探不成功时可以试试，可填电脑或手机，也可以自定义多个请求头数据集，用$和#分隔
"搜索请求头": "",
"图片请求头": "",//写了图片请求头，自动使用图片代理。如果不写图片请求头，但有;;t或"图片代理":"1",图片请求头与请求头一致
"post请求头": "",
"登录":"",//需要登录的站源，填写：登录地址、账号、密码信息，示例："登录":"https://zhaoziyuan.la/logiu.html;post;username=user1&password=123456",
"ocr":"",//手动填写自己认为比较好用的ocr网站，支持轮询，用||分隔
"ocr截取":"",//对ocr得到的验证码加工
"ocr过滤":"",//多个关键词以#分隔，不填写就默认使用"登录#注册#绑定#评论"，如果网页含有里面任意关键词，表示该网页不是安全验证页，将不触发ocr验证

/**
*手动输入验证码时，有4个可选项，①#②#③#④位置不能弄错：
①分类验证图片链接，不填写用内置默认模板，比如：#②#③#④
②分类验证码提交链接，验证地址中验证码的位置用{code}占位，不填写用内置模板，比如：①##③#④
③搜索验证图片链接，不填写用内置默认模板，比如：①#②##④
④搜索验证码提交链接，验证地址中验证码的位置用{code}占位，不填写用内置模板，比如：①#②#③#
*如果填写了，不加快捷命令o0，并且能获取到ocr链接，则不弹窗，填给ocr用，否则给弹窗验证用
*都不填写时，如果加;;y用内置模板以验证码的方式弹窗验证，
           如果加;;Y用内置模板以小网页的方式弹窗验证。
*如果分类和搜索验证图片链接相同，或者只有分类、搜索其中一种验证，可以只写①#②#④，注意，虽然没填③，但中间没有连续的##，这里的①是分类或搜索验证图片链接，②和④同上
*/
"验证":"①#②#③#④",
"浏览器":"",//需要点击才能筛选或播放的，可填写需要点击的网页链接，仅适用于只需点击一次的网站

"免嗅": "",//默认为1，自动开，快捷关:m0
"嗅探词":"",//默认使用壳的规则
"过滤词":"",//默认使用壳的规则
"渲染目标":"",//渲染过程中，发现截取目标，立即结束渲染，返回截取结果，可以是XBPQ的截取方式：a&&b，也支持在渲染中通过js用正则表达式截取，如：/<iframe.*?src=\"(.*?)\"/，支持Gzip压缩格式
"渲染嗅探":"",//JS渲染时可嗅探任何资源，如果"渲染嗅探":"直链",那么会使用默认的直链嗅探规则，多个关键词以#分隔，不影响视频直链嗅探规则，如果写了此项，嗅探到资源立即结束渲染，嗅探到的资源会放到渲染后的源码前面
"渲染过滤":"",//渲染过滤在有渲染嗅探时才生效，仅仅渲染过滤，不起任何作用
"渲染注入":"",//js脚本代码，支持Gzip压缩格式
"拦截请求头":"",//渲染时拦截并修改请求头，格式同其他请求头一样
"起始页": "",//默认1，一般不填
"页码倍率":"",//如果填上数字，页码会以倍率递增，比如50倍的页码为：50、100、150、200......

"直接播放": "",//默认0，为1时所有分类直接播放，也可以指定直接播放的分类，可以指定多个，以#分隔，比如"直接播放":"电影#首页"，快捷开:z

"短视频":"",//默认0，用于直接播放类，为1时，直接播放可以省略不写，会拉取整页短视频到播放列表，而不是单个播放，也可以按分类指定，比如"短视频":"直播"，快捷开:D
"强制解析":"",//默认0，全都走解析，解析失败再嗅探，快捷开:j
"倒序": "",//默认自动，出现错误时，强制指定1或0可纠正，快捷开|关:d|d0
"图片代理": "",//默认0，不显示图片时可试试1，快捷开:t
"代理方式xx":"",
"代理方式yy":"",//当图片链接末尾附加了proxyWay=xx这样的后缀时，自动使用代理，并指定代理方式，比如附加proxyWay=yy，会在配置中找到"代理方yy"并执行。xx、yy可以是数字，也可以是更容易理解的汉字或英，指定的代理方式支持使用部分变量。当图片链接末尾附加了空值的proxyWay=，也就是=号后面无内容，或者没有配套的"代理方式yy"，将使用简单图片代理，相当于图片代理按分类指定功能，只代理附加了尾巴的图片链接
"跳转图片":"",//跳转到详情页获取图片
"跳转图片代理":"",//不方便提前跳转的图片链接，在图片代理的时候跳转，写了跳转图片代理，自动使用图片代理。
"图片代理aes":"key-iv-填充模式",//图片代码时aes解密，填充模式可省略。key和iv不能少，没有IV就填空，会自动识别为ECB解密，写了代理aes，自动使用图片代理。如果是CBC、ECB之外的AES解密类型，填充模式必须填写完整（通用模式），如：key-iv-AES/CTR/NoPadding

"横图模式":"电影#列数$2",//id版专用，建议直接用视图模式，更全面。电影分类横图，2列展示。为1、全部时，所有分类横图，快捷开:h、h1、h2
"视图模式":"全部$0-0-H",//id版专用，全部统一指定时，可以省略全部$，不指定列数可以简写方、横，或F、H，视图模式优先级高于快捷命令h、f
"视频排序":"",//以>分隔

"指定代理":"",//id版专用，内容必须与当前源的key完全一致，外挂jar时填写此项，可使用外挂jar自己的代理，不是外挂jar不用填写此项

"域名跳转":"",//可以在首页截取域名进行跳转，快捷开关：域/域n
"发布页":"",//需要跳转，但首页获取不到跳转链接，可以指定

"状态码白名单":"",//申请网页时状态码如果在白名单中，表示成功，返回源码，否则返回错误码。解析对应的不是状态码，是"code"的值。内置默认白名单"200|201|203|206"，可以ini中全局设置，也可以在源中通过此字段单独设置，可以只写要增加的状态码

//获取大分类
"分类url": "",//最重要的、唯一不能省略的字段
//第一页与其他页不一样的(一般是第一页没有页码)，直接用英文中括号加在分类url末尾，此处是否填写地区、剧情、年份字母、语言、排序{area}、{class}、{year}、{letter}、{lang}、{by}，决定是否开启相应筛选
//筛选可以设置默认值，如{class|动作}，默认值就有两个作用，一是防止某筛选为空时分类无数据，二是可以偷懒，比如喜欢看动作片，设置{class|动作}就不用每次去手动筛选了。如果要指定不同分类不同默认值，可以在"筛选默认值"字段中填写
//可以使用自定义筛选，链接中{自定义}，并有配套的"自定义"字段，自定义名称不能和现有字段重名。
"特殊分类链接":"",//处理分类链接格式不一致的情况，格式为:"a、b$特殊链接1#c$特殊链接2..."，多个分类使用同一个链接可以用顿号、逗号隔开
//可拼分类还可拼搜索，拼的搜索把搜索url内容追加在特殊分类链接末尾，以#分隔，如："特殊分类链接":"少儿$https://xxx.xxx.xx/{cateId}-{catePg}.html#https://yyy.yy/search/{wd}",
//特殊分类如果无数据，需要指定截取，参考上面第5点

"分类url加工":"",//对分类url、搜索url进行加工处理，如果加工生成的数据是json，将作为视频列表直接交给壳使用（T4中转，目的是对T4内容修改后再转交给壳，或者直接使用现成数据）

"分类": "",/*用$ #分隔，海阔模式时以&分隔
有特殊分类后，主分类可以是正常分类和搜索混合
加搜索词为分类，再指定为特殊分类就可以了，比如
"分类":"电影$1#电视剧$2[排序:刘德华>张学友>周华健>电视剧]
"特殊分类":"刘德华,张学友,周华健$/search/{cateId}--------{catePg}---.html",
排序中的关键词如果分类中没有时，会自动生成该关键词的搜索分类，并加入排序，特殊分类可省略
*/

"分类值":"",//海阔模式时使用，以&分隔
//分类值如果以http开头，可包含{catePg}，未筛选时将直接使用这个链接作为此分类的链接，筛选时还是使用原来的"分类url"

"xx分类":"",//截取某一类型的源码范围，如热搜词、演员表，或截取范围后替换成"id$标题#id$标题"格式，如整个分类范围、某类筛选等，会在分类中自动添加该分类，以列表的形式展示。"id$标题#id$标题"格式的分类默认二级url为分类url，否则，默认二级url为搜索url，特殊情况，在特殊分类url中手动指定该二级url

/*二级目录
二级有三个地方要注意：
1.在特殊分类url中指定二级的url，比如：热门分类二级$https://mmgy.cc/{cateId}/page/{catePg}.html
2.在二级目录中要有这个分类的名称
3.在二级ID截取一级分类获得链接中ID部分，它将用于替换特殊分类url中的{cateId}，如果链接直接截取的是ID，可省略二级ID
4.可以全部是二级目录，支持例外，如：
"特殊分类":"全部二级$https://..........#电影$http......",
"二级目录":"全部[不含:电视剧]",
"二级ID":"全部$a&&b#电影$c&&d",
*/
"二级目录":"首页,热门分类|folder-0-0-H",//id版以外的用folder，可以只填分类名称，可以使用全部[不含:xx]。
"二级ID":"热门分类$a&&b",//在得到的链接中截取，如果不填二级ID，将直接使用链接，在特殊分类中加上此分类的二级，如xx二级${cateId}，就是直接将一级链接交给二级使用。

//也可以使用截取方式获取大分类
"分类二次截取": "",
"分类数组": "",
"分类标题": "",//可以排序，如："分类标题":"a&&b[排序:分类5>分类3]",排序中的关键词如果分类标题中没有时，会自动生成该关键词的搜索分类，并分加入排序
"分类ID": "",
"分类详情": "",//id版专用，分类详情显示模式，格式为"主演$a&&b#简介$c&&d#...#列数$32"，这里32是横屏3列竖屏2列的意思，列数可省略，详情有什么填什么，没有不填

//获取分类展示数据
"二次截取": "",
"数组": "",
"图片": "",//当图片链接末尾附加了proxyWay=xx这样的后缀时，配合"代理方式xx"，自动使用代理，并指定代理方式。当图片链接末尾附加了空值的proxyWay=，也就是=号后面无内容，或者没有配套的"代理方式yy"，将使用简单图片代理，相当于图片代理按分类指定功能，只代理附加了尾巴的图片链接
"标题": "",
"副标题": "",
"链接": "",
"链接前缀": "",
"链接后缀": "",
"视频排序":"",//像线路排序一样对各分类视频排序，以>分隔，标题，副标题中的文字均可参与排序，如果分类页中有演员详情，比如："视频排序":"直播中>已结束>四川",配置中的视频排序是默认排序，可在高级筛选中临时变更

"链接加工":"",//进入详情页之前，对影片链接进行加工，如果加工生成的数据是json，将作为详情数据和播放列表直接交给壳使用（T4中转，目的是对T4内容修改后再转交给壳，或者直接使用现成数据）

"详情页加工":"",//获取详情页源码后，对整个详情页源码进行加工，对多线的网页同样生效

//多线：从详情页截取其他网页链接，并读取其源码合并到详情页，支持多网页合并截取详情、线路及播放列表
"多线二次截取": "",
"多线数组": "",
"多线链接": "",//不适合json和jsoup截取方式
"多线链接前缀": "",
"多线链接后缀": "",

//获取线路标题
"线路二次截取": "",
"线路数组": "",
"线路标题": "",/*如果能准确定位，可省略线路数组
*可按线路名排序，在引号内末尾添加，如果只填排序，将自动截取后排序，如 "线路标题": "[排序:自建蓝光>腾腾><m3u8<广告]",，自建蓝光、腾腾会放到最前，m3u8、广告会放到最后
*排序分三种情况：
*使用了><，将正反同时排序，><前面的关键词正向排序，><后面的关键词反向排序
*只使用"<"，将反向排序
*使用了>或者只有关键词，将正向排序
*自定义线路，如"线路标题":"奇奇#芒芒#腾腾",这种格式，将自定义线路，结果会分把所有数组合并成一个，并复制成3份，分别给定义的几条线路，然后可以分别配置解析，就是以解析来分线路了
自定义线路可以从网页截取随机生成
*/

"线路合并":"",//有值且值不为0时，所有线路合并为一条线路，为1时，以影片名作为线路名，否则以值作为线路名
"允许自动换源": "",//快捷命令为H，如果该值为"1"或"是"，未获取到播放列表时直接返回空，手动淘汰完全部线路不再保留最后一条，也不会把详情链接作为播放链接返回

"播放器":"",//id版专用，指定播放器，可以按线路指定，比如："播放器":"exo",  "播放器":"空||蓝光1,蓝光2--exo||艺艺--ljk",

//获取详情
"详情图片":"",//默认从分类页传递图片链接，也可通过此字段对其加工或在详情页截取
"详情二次截取":"",
"影片类型":"",
"影片年代":"",
"影片地区":"",
"影片状态":"",
"导演": "",
"主演": "",
"简介": "",
"演员超链接": "",//id版专用，{{域名-c}}/zh/chinese_avperformer/{cateId}/{catePg}.html",
"导演超链接": "",//id版专用，{{域名-c}}/zh/chinese_director/{cateId}/{catePg}.html",

/*
获取播放列表，结构如下：

         播放解析
播放数组<         播放标题
         播放列表<
                  播放链接
*/
"播放二次截取": "",
"播放数组": "",
"播放解析":"",//如果填写了播放解析并截取到数据，则播放链接=播放解析+播放链接，截取内容不作限制，此时播放前缀后缀将不起作用，需要通过加号拼接来实现前缀后缀

"超时":"",//获取播放列表超时时间，默认15秒，因壳有超时机制，因此必须在壳超时前返回播放列表给壳，能获取多少给多少，以免造成无数据
"列表二次截取": "",
"播放列表": "",
"播放标题": "",
"播放字幕": "",//在详情页截取的字幕
"跳转字幕": "",//在播放页截取，或在详情页截取了需要跳转截取的字幕
"播放链接": "",//如果使用了跳转解析，需要在播放链接前加"解析"拼接，如"解析+\"url\"*\"&&\"",如果使用了跳转post，需要在播放链接后加"跳转post"拼接，如"\"url\"*\"&&\"+跳转post"
"占位符":"",//在播放链接任意位置使用占位符，在播放的时候用此内容替换占位符，可按线路指定不同内容
"播放链接前缀": "",//支持指定线路
"播放链接后缀": "",
"弹幕":"",//加工好的弹幕
"弹幕库":"",//提供弹幕库，jar自动拼接弹幕，支持把播放链接拼接到弹幕库url=末尾，也支持自动替换弹幕库的占位符%s
"解析":"",//也可以写成"playUrl":"", 可用于跳转播放链接，或者免嗅
//如果填写的是单个解析，所有线路都使用这个解析。
//解析可以按线路指定，以$#分隔，多条线路共用一个解析可以用,分隔线路名，如："艺艺,芒芒$http....url="，如果第一个线路名填写的是默认，那么没匹配到的线路将使用第一个解析，如果第一个线路名填写的不是默认，没匹配到的线路不使用解析
//指定的解析，可以指定多个解析轮询，解析之间用||分隔
//不指定解析也可以轮询，只需以||分隔多个需要轮询的解析
"解析源码黑名单":"",//有的解析失败会得到一个错误的直链，内置的错误状态码无法过滤时，用此方式提供手动过滤

"播放链接加工":"",//用于在点击播放时对链接进行加工，比如播放链接会重定向，而且每次重定向的链接都会变化，这种就不能提前重定向，必须在播放时处理，"播放链接加工":"[工具:重定向]",如果加工生成的数据是json，将作为播放数据直接交给壳使用（T4中转，目的是对T4内容修改后再转交给壳，或者直接使用现成数据）

"click":"",//id版专用，如果需要点击才能播放，在源码中找到点击元素填入这里，如果各线路不同，可以按线路指定，与分类指定一样的格式，一样的逻辑，先匹配，匹配不到的，就用第一个

//可通过跳转尽力获取直链，但容易失效，需经常维护
"跳转播放数组":"",
"跳转播放链接":"",
"跳转播放链接加工":"",
"二次跳转播放数组":"",
"二次跳转播放链接":"",
"二次跳转播放链接加工":"",
//支持五次跳转......
"五次跳转播放数组":"",
"五次跳转播放链接":"",
"五次跳转播放链接加工":"",

"跳转占位符":"",//在跳转播放链接任意位置使用占位符，在跳转的时候用此内容替换占位符，可按线路指定不同内容
"跳转post":"",//需要带参数post才能跳转时使用，如，"主线[B]$;post;name=a&password=b",

//id版小说截取
"小说截取":"",//可通过替换法增加"换行符"手动换行，小说中有"换行符"的地方将换行，"空格符"手动添加空格
"下一页":"",

//id版漫画截取
"漫画数组":"",
"漫画链接":"",

/**
获取搜索数据
*如果搜索全部不填，自动获取包括json和截取的搜索url并搜索；
*如果只填了搜索url，会通过数组字段获取搜索数据，可单独指定搜索截取，指定方式:在其他截取后追加||搜索--a&&b，json方式也可以；
*如果填了搜索url和搜索数组，则通过搜索字段获取搜索数据。

*配置的搜索url中包含页码{pg}时，在搜索时可在关键词后附加页码范围（pg或PG加两位以上数值，），pg后面：
一位数:显示指定页(1页)，最多指定前9页
两位数:显示指定页数起的10页(最多10页)
三位及以上:前两位为起始页数，后面的为显示多少页，
比如搜索时输入"我的pg10"，表示搜索标题包含"我的"影片，展示搜到的第10至第20页，输入"我的pg105"，表示搜索标题包含"我的"影片，展示搜到的第10至第15页，不附加页码范围默认从第一页开始，最多展示10页搜索内容
*/
"搜索url": "",//可包含页码，支持首页不同（首页链接放入[]内），不止一页结果时，可以点击更多，以二级目录的形式浏览。jar能自动正确获取大部分网站搜索url，一般不用填写，手动post模式，网址;post;键1=值1&键2=值2

"搜索模式": "",//1为截取模式，0为json模式，自动情况下，先截取模式，无数据时再尝试json模式
"搜索后缀":"",//json模式时用于补充域名与id之间那部分内容，最好填写这个，能提高效率。写了这个自动使用搜索模式0

"搜索二次截取": "",
"搜索数组": "",
"搜索图片": "",
"搜索标题": "",
"搜索链接": "",
"搜索链接前缀": "",
"搜索链接后缀": "",
"搜索词编码":"",//参考快捷指令g和b
"延时":"",//填写分类名称，用于搜索延时，默认3秒，如果要用其他时间可以在分类名后接$秒数，多个分类如果有分类指定了时间，分类之间用#分隔，比如："延时":"分类一#分类二$4"。这是搜索延时;;s的进化版。有些搜索没有search这个特征，并且弄成分类了，网站又限制了搜索间隔，这个就很有用了

/**获取筛选
筛选中某一项的值如果是http开头，在使用此筛选时，此值作为此时的链接，可以包含后续{area}等筛选
海阔筛选模式也支持指定，比如剧情，在剧情中加"分类名称--"，剧情值不加
*/
"筛选页":""，//各个分类对应的含有筛选信息的页面，格式：分类名称$链接，以#分隔。填写了分类页或使用快捷命令"筛"，自动获取筛选，无法自动时需要补充xx二次截取、xxID等信息，用法与分类的截取相同。

"类型": "",//对应{cteId}，用$ #分隔，海阔模式时以&分隔
"类型值":"",//海阔模式时使用，以&分隔

"剧情": "",//对应{class}，用$ #分隔，海阔模式时以&分隔，内置通用模板，可使用[替换:惊悚>>空]的方式修改内置
"剧情值":"",//海阔模式时使用，以&分隔

"地区": "",//对应{area}，用$ #分隔，海阔模式时以&分隔，内置通用模板，可使用[替换:大陆>>中国大陆]的方式修改内置
"地区值":"",//海阔模式时使用，以&分隔

"年份": "",//对应{year}，默认筛选截止目前最近15年，格式：起始年-终止年，也可使用海阔模式，以&分隔
"年份值":"",//海阔模式时使用，用&分隔

"字母": "",//对应{letter}，用$ #分隔，海阔模式时以&分隔，内置通用模板
"字母值":"",//海阔模式时使用，以&分隔

"语言": "",//对应{lang}，用$ #分隔，海阔模式时以&分隔，内置通用模板
"语言值":"",//海阔模式时使用，以&分隔

"排序": "",//对应{by}，默认英文模式，时间$time#热门$hits，以$ #分隔
"高级筛选":"",//以&或#分隔，关键词中有>表示排序，如："高级筛选":"直播中&未开始&四川&未开始>直播中&直播中>未开始",配置中的视频排序是默认排序，高级筛选中的排序可临时变更排序
"自定义":"",//配合分类url中{自定义}，可使用自定义筛选，筛选名"自定义"不能与现有字段重名

"筛选默认值":"",//用于指定各个分类的筛选默认值，比如："电影--class$动作||电视剧--area$大陆||综艺--class$脱口秀#by$time",直接在分类url中使用{class|喜剧}的形式，能更简单的设置默认值
"筛选改名":"",//将筛选显示名称进行更改，比如使用了自定义筛选{actor}，正常情况下筛选显示actor,可以通过"筛选改名":"actor>>演员",更改为演员。另外如class默认显示为剧情，也可更改为自己想要的名称，支持多个同时改名，比如："筛选改名":"类型>>主题#地区>>年龄"
"筛选换行基准":"",//筛选名称$数字，单独设置不同筛选换行的默认值

"筛选": ""
/**
*筛选可换行，多行之间用+分隔
*筛选"不填写时，会根据"分类url"格式自动使用相应筛选
*筛选"填写0时，关闭筛选
*可在"筛选"字段填外部json地址，支持本地clan和外网http
*可直接复制包含大括号{}的json数据到"筛选"字段，大括号前后不能有引号
*/
}


/*
四、更新日志
__________________________________________
20240605
☆1.[编码:xx]改为[工具:xx]，增加截取、替换、计算功能
☆2.截取和替换增加正则表达式：/表达式/g
3.只要写了截取配置，小说>漫画>视频依次尝试
4.小说增加手动"空格符"、"换行符"
__________________________________________
20240606
1.增加图片请求头，并且如果写了图片请求头将自动代理
__________________________________________
20240607
1.完美解决解码反转义问题
__________________________________________
20240610
1.增加图片aes代理
__________________________________________
20240611
1.增加[工具:重定向]
2.优化小写截取，网页标签去除更彻底
3.完善图片aes代理
__________________________________________
20240612
1.增加自定义筛选
2.筛选可以有默认值
__________________________________________
20240613
1.增加筛选换行功能
2.支持筛选改名
__________________________________________
20240614
1.筛选自动换行
__________________________________________
20240615
☆1.未截取到播放列表时，将详情页链接当作播放链接直接播放
2.修改漫画逻辑
3.筛选自动换行完工，默认关闭筛选换行，快捷命令F开启自动换行
__________________________________________
20240627
1.取消全局替换\，只删除链接中的\
__________________________________________
20240622
1.兼容复杂的海阔筛选
__________________________________________
20240623
1.过滤链接中的\r\n
__________________________________________
20240624
1.尝试自动截取筛选
__________________________________________
20240625
1.完善筛选自动截取
__________________________________________
20240626
1.开始改造分类自动截取
__________________________________________
20240627
1.继续完善分类自动截取
__________________________________________
20240630
1.增加：随机图片()
2.继续完善分类自动截取
__________________________________________
20240701
☆1.补充分类特征，优化分类自动获取逻辑，大幅提升自动能力
__________________________________________
20240702
☆1.自动获取分类url，开始实施全自动工程，着手网址直达功能
__________________________________________
20240703
1.完善分类url自动获取
2.取消自动倒序
__________________________________________
20240704
☆1.截取增加[必含:xx]功能
2.优化筛选
3.从大量源码中分析并提取分类url、分类、分类Id、筛选以及页码特征，逐步完善网址直达
4.可在id壳输出网址直达生成的完整配置
__________________________________________
20240705
1.分析特征，完善逻辑，修复bug，逐步完善网址直达
__________________________________________
20240706
1.网址直达基本完善
__________________________________________
20240707
☆1.不再依赖壳的网页并发访问，建立jar自己的并发功能
2.增加字幕功能
3.增加并默认苹果ua
4.优化筛选自动获取
__________________________________________
20240710
1.优化线路截取逻辑，修复bug
__________________________________________
20240710
1.增加播放器指定
2.优化播放列表截取逻辑
__________________________________________
20240711
1.增加类似推送功能，如果分类url是视频，生成直接播放的单个视频
__________________________________________
20240717
1.click指定改为分类指定逻辑
__________________________________________
20240718
☆1.源码中多个空格替换成一个，并删除><之间空格，避免截取错误
2.增加方图模式快捷命令f
3.解决视图快捷命令与视图配置冲突，视图配置优先
__________________________________________
20240720
1.修复延时bug
2.完善ocr验证，过ocr重试时，申请网页源码延时
__________________________________________
20240723
1.完善分类ID截取
__________________________________________
20240724
1.修复源码缓存bug
__________________________________________
20240729
☆1.详情页有磁力链接时，自动增加磁力链接线路
__________________________________________
20240729
1.网页缓存纳入兼容性开关x
2.分类影片标题存入变量movieTitle
☆3.默认屏蔽伦理筛选，以及h站的分类url、分类自动获取，!解除屏蔽
__________________________________________
20240801
1.增加指定范围变量-t-d-j
__________________________________________
20240802
☆1.自动数组范围过小时，尝试在整页寻找并截取对应标题
2.补充标题过滤规则
3.进一步完善分类自动获取逻辑
4.修复搜索url自动获取bug
5.建立线路过滤规则
__________________________________________
20240803
1.截取变量时区分截取不到与空值，修复变量-c的bug
__________________________________________
20240805
1.增加快捷命令P(大写)，分类第一页无页码时使用此命令，可以省略分类url的[]内容
__________________________________________
20240807
1.修复分类url带快捷命令时并发错误
2.增加判断是-h-u
__________________________________________
20240808
☆1.减少不必要的cookie获取，修复请求头使用变量时反复访问网页问题
__________________________________________
20240810
☆1.自动截取调整为<a>优先，优点：更容易获取正确列表，缺点：部分网站无法截取到副标题
__________________________________________
20240813
1.增加线路纠错开关l(小写L)，自动模式剧集被误判为线路时使用
2.增加内置变量{{时间戳}}、{{时间秒戳}}
__________________________________________
20240815
☆1.支持自动截取标题与图片不在同一个<a>或<div>中的列表
2.自动截取图片排除.png，标题图片截取失败会自动纠错，要禁止自动纠错，可在截取配置中使用[包含:xx]或[不含:xx]
3.补充链接过滤规则
4.修复验证误判，兼容开关x禁止使用ocr
__________________________________________
20240818
1.+号拼接http自动纠错，纳入兼容性开关x
__________________________________________
20240820
1.完善标题自动截取
2.修复一处搜索bug
__________________________________________
20240821
☆1.减少内存占用，优化性能
2.网络连接超时改为10秒
__________________________________________
20240822
1.完善标题、链接自动截取，补充无引号的截取规则
2.修复搜索二级视图非当前源时失效的bug
☆3.采集搜索翻页特征，增加自动搜索翻页，搜索二级中展示更多[搜索词]相关内容
__________________________________________
20240823
1.捋了一遍github代码仓库，建立自6月起的更新日志
__________________________________________
20240901
1.修复链接href=&& 截取bug
__________________________________________
20240912
☆1.工具增加“源码”
2.修复跳转详情不生效的bug
3.图片svg过滤，链接/login过滤
__________________________________________
20240914
1.缓存类变量增加缓存有效时间
__________________________________________
20240918
1.修复搜索自动翻页bug
__________________________________________
20240921
1.修复自动json模式的bug
__________________________________________
20241018
1.增加特殊请求头函数，在链接后附加：请求头(xxx)，由xxx字段来单独定义这个特殊请求头
2.优化数组的+合并
3.增加快捷命令r2和R2
4.非自动模式时详情页可以调用{{lineTitle}}
__________________________________________
20241027
1.aes增加ECB加解密，只有key，没有iv
2.aes加密输出增加hex格式
3.修复数组+的bug
4.非自动模式详情页可以按线路指定截取
5.增加详情二次截取
6.修复变量值中+号消失问题
__________________________________________
20241029
1.工具中的截取支持包含、不含，用中文〔〕括起来，多个词之间用♯分隔
__________________________________________
20241031
1.解析、跳转解析可轮询，增加"轮询解析"，跳转解析失败时使用
__________________________________________
20241101
1.跳转增加格式判断，以确定是否中止，可通过嗅探词和过滤词来控制
2.增加验证真人弹窗
__________________________________________
20241102
1.增加播放请求头Origin的快捷命令O和O1
__________________________________________
20241105
1.aes支持192位、256位密钥
2.范围变量进入指定范围重置并获取新值一次
__________________________________________
20241106
1.不过滤post空值
2.改变ua缓存策略，写了ua的不用缓存
__________________________________________
20241107
1.增加链接加工、详情页加工
2.增加内置变量{{movieLink}}
__________________________________________
20241108
1.自动Unicode转码aes解密后的文本
2.自动删除源码中的\r\n和\
3.完善详情页json截取模式（播放数组、播放列表、线路标题）
__________________________________________
20241111
1.取消ocr滑动验证
__________________________________________
20241112
1.增加"分类url加工"字段（搜索url也用此字段加工）
__________________________________________
20241115
1.更改aes模块，支持低版本安卓
__________________________________________
20241119
1.增加工具unicode
__________________________________________
20241120
1.修复人机验证bug
__________________________________________
20241128
1.工具增加ungzip、gzip
2.兼容模式x不删除源码中换行符
__________________________________________
20241201
1.工具中截取支持指定和轮询
__________________________________________
20241203
1.工具增加分割插入
__________________________________________
20241207
1.完善自动模式搜索数组
2.修复自动模式时，图片加前缀时无法过滤无图数组的bug
__________________________________________
20241208
1.修复手动模式无法过滤空标题的bug
__________________________________________
20241221
1.增加"跳转播放链接加工"、"二次跳转播放链接加工"......
2.工具增加SHA加密
3.工具内支持变量
4.内置变量增加typeLink、playLink、typeTitle、playTitle
__________________________________________
20241226
1.修复工具计算bug
2.工具计算增加取余操作%
__________________________________________
20241227
1.修复自定义线路严重影响效率问题
2.增加3DES(DESede)加解密
__________________________________________
20241228
1.增加工具分割截取
__________________________________________
20241229
1.增加播放列表获取超时机制，默认15秒，可在ini文件中改变默认值
2.增加超时字段，用来改变超时时间
__________________________________________
20241230
☆1.多线程获取播放列表
2.增加线程数字段，用来设置线程数
__________________________________________
20241231
1.跳转变量-j改为播放变量-p
2.新增内置变量typeLink-u、movieLink-u、playLink-u
__________________________________________
20250101
☆1.多线程获取影片列表
☆2.json模式也加入多线程
__________________________________________
20250102
1.把快捷命令中，保留源码中的换行符n、禁止自动ocr验证o0，从x开关中分离出来
2.增加分类页加工
3.工具增加json格式化
4..修复页面加工后，变量还在加工前老页面获取的问题
5.修复自动模式时，多线程获取播放列表出错率高的bug
__________________________________________
20250104
☆1.手动模式时，线路标题提前处理，过滤掉的线路不再浪费时间去获取，如果有排序，按排序的线路依次获取，线路过滤得一个不剩，则取第一条线路
2.增加"允许自动换源"字段
3.多线源码合并操作，去除跳转详情、跳转链接字段
__________________________________________
20250105
☆1.重写新的json截取功能，取消json模式，支持混合截取
2.完善json截取的替换、筛选功能
__________________________________________
20250106
☆1.json截取支持+连接，支持工具，支持变量
2.兼容老写法，怎么简便怎么写，如j:data.list
__________________________________________
20250107
1.json截取支持包含、不包含
2.精简jar包，删掉Xpath、jsoup相关代码及依赖库
__________________________________________
20250108
1.填写"验证"，o0非ocr模式，或者未获取到ocr链接才会弹窗
  快捷命令y、Y一定会弹窗
2.更改"验证"填写规则，增加分类验证图片链接
3.分割支持添加<序号>
__________________________________________
20250109
1.ocr默认重试次数由3次改为5次
__________________________________________
20250115
1.修复中文md5不正确的bug
__________________________________________
20250116
1.源码工具支持多线程并发访问
2.修复指定截取造成的\\-冲突
__________________________________________
20250117
1.增加快捷命令N，+号拼接截取，如果某一环截取为空，那么整个拼接返回空，而不返回错误的拼接字符串，保证正常轮询，跳转失败时也能使用跳转前的链接
2.把"1&&-1"、"&&"的判断提到最前，直接返回完整数据，不再作多余动作
__________________________________________
20250118
1.增加异或工具、字符映射工具
__________________________________________
20250119
1.增加hex与b64互转工具
2.AES工具增加通用模式
__________________________________________
20250120
1.图片代理aes增加通用解密模式
2.aes解密后支持输出b64，把"解aes"改为"解密aes"即可
3.增加"详情图片"字段
__________________________________________
20250122
1.整合精简加密解密工具代码，并增加RSA、RC4支持
__________________________________________
20250123
1.增加{{随机数}}变量，增加随机字符工具
__________________________________________
20250124
1.修bug，完善{{随机数}}变量功能
__________________________________________
20250125
1.修bug，解决分割工具包含不包含中的♯不生效问题，处理固定截取返回原字符中的转义
__________________________________________
20250202
1.post支持txt和xml
2.源码转b64支持post
__________________________________________
20250203
1.修复图片代理造成的一些bug
__________________________________________
20250204
1.修复源码转b64以及线路名重复替换的bug
2.增加"站名"字段，文件源如果用了图片代理，并且未写指定代理，自动生成指定代理
3.增加内置变量{{数组缓存}}
4.更改快捷命令c逻辑
__________________________________________
20250205
1.所有内置变量增加中文名
__________________________________________
20250207
1.增加只含，字符串要完全一致
__________________________________________
20250214
1.修复调试模式详情bug
__________________________________________
20250228
1.修复有特殊分类url时筛选会重复的bug
2.j0时，自动免嗅如果得到官源链接，就放弃自动免嗅
__________________________________________
20250302
针对影图
1.支持无效源检测
2.支持从api中获取sourceKey
3.支持分类源内搜索
__________________________________________
20250303
针对影图
1.支持action动作，推荐页增加源内搜索按钮
2.增加快捷命令"分"
3.推荐页无数据时显示分类按钮
__________________________________________
20250304
1.针对影图，增加源内收藏功能，长按菜单
2.防止重复加载视频列表
__________________________________________
20250305
1.收藏夹只有高级筛选生效，无高级筛选时，收藏夹不显示筛选标记
2.修复默认筛选bug
3.如果首页无法获取数据，在标记失效的同时，生成友情提示，可查看原因
4.如果无分类，则显示源内搜索和收藏夹，主要用于纯搜索源
5.当前分类增加"初始化"
6.各类url支持Base64(字符串)，表示用Bse64编码括号中的内容替换整个函数，比工具方便
7.更多[搜索词]...也可收藏
__________________________________________
20250307
1.推荐页增加偏好设置按钮
2.收藏夹增加清空收藏、重置偏好菜单
3.增加源内搜索历史，可在偏好设置中关闭
__________________________________________
20250308
1.增加更多设置
__________________________________________
20250309
1.增加快捷命令"序"，播放列表排序
__________________________________________
20250313
1.修复特殊分类自动加搜索二级时的bug
__________________________________________
20250315
1.完善源内搜索词编码
2.调整图标背景色设置
__________________________________________
20250316
1.访问错误也获取cookie
__________________________________________
20250317
1.修复全部二级不含搜索二级的问题
2.未填写二级图标时，使用文件夹图标
3.修复防重复加载造成间歇性无数据的bug
4.在二级目录可以调用一级标题{{标题}}
__________________________________________
20250318
1.修复播放标题无法过滤问题
2.增加源内过滤，过滤开关
3.增加"ocr过滤"字段
__________________________________________
20250320
1.修复分类列表push://推送播放失败问题
__________________________________________
20250322
1.支持渲染数据
2.增加"渲染"工具
__________________________________________
20250323
1.增加指定代理方式功能
__________________________________________
20250324
1.增加渲染拦截
__________________________________________
20250325
1.增加"渲染嗅探"字段，渲染时可嗅探需要的资源
__________________________________________
20250328
1.修改源内搜索逻辑
__________________________________________
20250331
1.修改hex工具代码，自动补位
__________________________________________
20250402
1.源码工具得到的源码不作任何自动化处理
2.修复渲染bug，完善渲染逻辑
3.渲染超时根据网络延迟动态设置
__________________________________________
20250403
1.增加源码渲染工具
2.防渲染内存泄漏和堆积
__________________________________________
20250404
1.快捷命令N，工具任一环节错误，或者拼接截取任一截取错误，立即返回空
2.回退hex工具代码
3.支持aes-gcm解密：tag附在iv后，用#分隔
4.增加asiic工具
5.增加asiicToHex，解密支持hex密钥
6.去掉id渲染
__________________________________________
20250405
1.增加渲染过滤
2.如果写了渲染嗅探，嗅探到资源立即结束渲染
3.修复重大bug：去掉id渲染后造成post不可用
__________________________________________
20250407
1.修复aes加密bug
__________________________________________
20250408
1.ocr验证区分get/post
2.ocr支持自定义post
3.ocr可以填写多个，用||分隔，当无数据时轮询下一个
4.偏好设置立即生效
5.优化指定与轮询逻辑，两者可以共存
6.内置变量{{验证码}}
__________________________________________
20250409
1.post增加防二次url编码开关，u2=0时不允许二次编码
__________________________________________
20250413
1.修复ocr轮询bug
2.缓存机制增加"缓存"
__________________________________________
20250414
1.修复源内搜索
2.修复cookie的=号冲突
3.修复缓存bug
__________________________________________
20250416
1.渲染链接并且渲染的链接访问失败才返回错误码
__________________________________________
20250417
1.针对id壳，改127IP段为192IP段
__________________________________________
20250418
1.渲染提供js交互方法XBPQ.postHtml(str)、XBPQ.set(key, value)、XBPQ.get(key)、XBPQ.log(msg)
2.增加运行js工具
__________________________________________
20250419
1.渲染js增加截取功能XBPQ.cut(html, cut)
2.渲染可指定渲染目标
__________________________________________
20250420
1.渲染目标支持使用正则表达式，js直接截取
2.修复渲染轮询bug，优化渲染日志
3.使用/html:渲染不会自动补基础url
4.渲染目标和渲染嗅探可相互配合，提高效率
__________________________________________
20250420
1.增加渲染注入功能
__________________________________________
20250422
1.优化渲染嗅探、渲染目标和加载完成逻辑，避免冲突，解决webview两个定时器同时频繁运行造成卡死问题
2.x对主域名无效，其源码一定会缓存
__________________________________________
20250424
1.增加读取、写入工具，用来动态改变配置
2.增加设置变量工具，用来动态设置变量
3.增加如果语句工具，可以根据条件选择执行分支
4.增加命令开关工具
5.增加日志、弹窗工具，可自定义日志输出
__________________________________________
20250424
1.增加XBPQ适时日志，打开本地链接http://127.0.0.1:9977/log可查看适时日志
__________________________________________
20250502
1.优化XBPQ适时日志
__________________________________________
20250504
1.增加"变量预加载"字段
__________________________________________
20250506
1.支持影图源t4
__________________________________________
20250508
1.增加快捷开关✚和→
__________________________________________
20250509
1.只保留双引号前面的反斜杠
2.修复从历史进入渲染会闪退的bug
__________________________________________
20250510
1.跳转解析、轮询解析整合到解析，完善解析轮询功能
__________________________________________
20250512
1.增加状态码白名单字段
2.增加解析源码黑名单字段
3.解析的网页默认不缓存
__________________________________________
20250517
1.修复直接播放的源无法翻页的bug
__________________________________________
20250523
1.当未填写主页url，且域名无法访问时，自动把第一分类第一页作为主页url
__________________________________________
20250609
1.修复gzip无法压缩的bug
2.ua支持变量和gzip
3.修复条件语句bug
__________________________________________
20250610
1.修复变量截取bug，任何情况下得到的网页源码，都更新为当前源码
__________________________________________
20250611
1.修复设置变量工具偶尔失败的bug
2.没有截取符号或者截取配置大于1000个字符时，加号不作为连接符使用
3.增加变量-g
__________________________________________
20250612
1.增加分类标题排序，分类排序、分类标题排序时，如果排序词不在分类或分类标题中，自动生成该关键词的搜索分类
2.修复不同源的同名变量共用bug
__________________________________________
20250614
1.解决个别加v还会嗅探问题
2.被替换字符中没有通配符时不使用正则表达式，提高替换效率
__________________________________________
20250616
1.修复工具中转义右中括号后面部分消失的bug
__________________________________________
20250617
1.完善okhttp，防止假的错误码而过滤响应体
__________________________________________
20250621
1.截取增加jsoup选择器模式
2.修复混合截取拼接bug
3.完善验证逻辑，没有o0快捷命令并且配置了ocr网址，会禁止弹窗验证
__________________________________________
20250622
1.增加&&分割(分割符)截取方式
2.所有截取模式都支持全部筛选功能
3.播放链接不再附加?title=标题信息
4.增加快捷命令$
5.现成的播放数组加快捷命令$就可直接用，此时播放数列表那些无效
__________________________________________
20250624
1.全面兼容所有截取方式，&&、/.*?/g、j:、p:、&&分割()，解决分类、线路标题、跳转播放链接等很多地方只能用&&的问题
2.线路排序支持正反同时排序
__________________________________________
20250627
1.内置变量增加{{时间}}、{{分类值}}、{{页码}}
__________________________________________
20250629
1.完善&&分割(分割符)功能
__________________________________________
20250630
1.修复json、jsoup截取bug，优化逻辑
__________________________________________
20250701
1.完善换行符的替换
__________________________________________
20250702
1.默认不自动解码url
2.工具中的轮询符号换成∬
__________________________________________
20250703
1.增加快捷命令H
__________________________________________
20250704
1."播放解析"字段不限制截取内容
__________________________________________
20250705
1.增加工具:ocr识别，增加内置变量{{uuid}}
__________________________________________
20250707
1.json截取兼容字符串中的未转义引号
2.优化工具逻辑，减少关键词冲突（产生了bug，20250709修复）
__________________________________________
20250708
1.json截取路径中间允许数组
2.json截取路径可使用*
3.填写了播放列表，就禁止快捷命令$生效
__________________________________________
20250709
1.整理说明文档
2.修复工具替换和解密bug
3.增加更多非法json类型的自动修复
__________________________________________
20250712
1.修复多重分割截取bug
2.MD5增加大写输出
__________________________________________
20250716
1.取消截取规则字符数小于1000的限制
2.设置变量工具可以设置临时变量
3.跳转播放链接支持纯加工
__________________________________________
20250717
1.完善条件语句，增加多种判断方式
__________________________________________
20250718
1.工具增加循环语句，循环、条件语句可以相互嵌套
2.增加返回工具
3.增加内置变量响应头和状态码
__________________________________________
20250720
1.如果分类url加工、链接加工、播放链接加工生成的数据是json，将直接交给壳使用，相当于T4源的中转站，可在不破坏json结构的前提下，修改后再交给壳
2.条件语句也支持返回元素
__________________________________________
20250723
1.post请求增加data模式
2.写入和设置变量支持指定值，格式为：
  写入-字段名:字段值
  设置变量-变量名:变量值
3.修复工具中♯的bug
4.修复条件语句否定bug
__________________________________________
20250724
1.所有请求头，除ua外，如果值为"空"，代表删除该项，不使用这个参数
__________________________________________
20250727
1.手动模式不过滤链接、播放链接
2.写了播放请求头中特殊请求头不需要加快捷命令C
3.如果User-Agent是小写字母，给壳也小写字母
4.默认不自动编码解码url
__________________________________________
20250730
1.修复id失效检测bug
2.增加颠倒工具
3.增加自定义加密字段
4.修复post体无法大括号嵌套的bug
5.删除无用的变量预加载字段
__________________________________________
20250731
1.增加密文配置生成开关M
2.网址直达可在ext中只填网址，以;;结尾或加快捷命令
3.修复运行js的bug
__________________________________________
20250801
1.完善条件语句中的变量功能
2.增加内置就是{{最近访问}}
__________________________________________
20250802
1.内置CryptoJS库供运行js使用
__________________________________________
20250803
1.混淆jar
__________________________________________
20250804
1.混淆源码
__________________________________________
20250805
1.扩展js库
__________________________________________
20250806
1.增加消息工具，弹出可复制内容的弹窗消息
__________________________________________
20250807
1.完善消息工具弹窗功能，美化布局
2.运行js增加省略写法
__________________________________________
20250810
1.增加弹幕、弹幕库字段
2.增加变量{{播放序号}}
__________________________________________
20250811
1取消自动处理链接中的//和空格、amp;
__________________________________________
*/
